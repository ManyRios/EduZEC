/* tslint:disable */
/* eslint-disable */
export function __wbg_proposal_free(a: number, b: number): void;
export function proposal_describe(a: number): number;
export function __wbg_webwallet_free(a: number, b: number): void;
export function webwallet_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function webwallet_create_account(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function webwallet_create_account_ufvk(a: number, b: number, c: number, d: number, e: number): number;
export function webwallet_sync(a: number): number;
export function webwallet_get_wallet_summary(a: number): number;
export function webwallet_propose_transfer(a: number, b: number, c: number, d: number, e: number): number;
export function webwallet_create_proposed_transactions(a: number, b: number, c: number, d: number, e: number): number;
export function webwallet_db_to_bytes(a: number): number;
export function webwallet_send_authorized_transactions(a: number, b: number): number;
export function webwallet_get_current_address(a: number, b: number): number;
export function webwallet_get_latest_block(a: number): number;
export function __wbg_walletsummary_free(a: number, b: number): void;
export function __wbg_get_walletsummary_chain_tip_height(a: number): number;
export function __wbg_set_walletsummary_chain_tip_height(a: number, b: number): void;
export function __wbg_get_walletsummary_fully_scanned_height(a: number): number;
export function __wbg_set_walletsummary_fully_scanned_height(a: number, b: number): void;
export function __wbg_get_walletsummary_next_sapling_subtree_index(a: number): number;
export function __wbg_set_walletsummary_next_sapling_subtree_index(a: number, b: number): void;
export function __wbg_get_walletsummary_next_orchard_subtree_index(a: number): number;
export function __wbg_set_walletsummary_next_orchard_subtree_index(a: number, b: number): void;
export function walletsummary_account_balances(a: number): number;
export function start(): void;
export function __wbg_blockrange_free(a: number, b: number): void;
export function __wbg_get_blockrange_0(a: number): number;
export function __wbg_set_blockrange_0(a: number, b: number): void;
export function __wbg_get_blockrange_1(a: number): number;
export function __wbg_set_blockrange_1(a: number, b: number): void;
export function __wbg_wbg_rayon_poolbuilder_free(a: number, b: number): void;
export function wbg_rayon_poolbuilder_numThreads(a: number): number;
export function wbg_rayon_poolbuilder_receiver(a: number): number;
export function wbg_rayon_poolbuilder_build(a: number): void;
export function initThreadPool(a: number): number;
export function wbg_rayon_start_worker(a: number): void;
export function wasm_thread_entry_point(a: number): void;
export function __wbg_intounderlyingbytesource_free(a: number, b: number): void;
export function intounderlyingbytesource_type(a: number, b: number): void;
export function intounderlyingbytesource_autoAllocateChunkSize(a: number): number;
export function intounderlyingbytesource_start(a: number, b: number): void;
export function intounderlyingbytesource_pull(a: number, b: number): number;
export function intounderlyingbytesource_cancel(a: number): void;
export function __wbg_intounderlyingsource_free(a: number, b: number): void;
export function intounderlyingsource_pull(a: number, b: number): number;
export function intounderlyingsource_cancel(a: number): void;
export function __wbg_intounderlyingsink_free(a: number, b: number): void;
export function intounderlyingsink_write(a: number, b: number): number;
export function intounderlyingsink_close(a: number): number;
export function intounderlyingsink_abort(a: number, b: number): number;
export function rustsecp256k1_v0_8_1_context_create(a: number): number;
export function rustsecp256k1_v0_8_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_8_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_default_error_callback_fn(a: number, b: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export const __wbindgen_export_4: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha90cf2322f80b33c(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1ce7f8b03e084418(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3d271e8f62a069ae(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h9729d990f18c9f88(a: number, b: number, c: number, d: number): void;
export function __wbindgen_thread_destroy(a: number, b: number, c: number): void;
export function __wbindgen_start(a: number): void;
